import os
import time
from typing import Optional, Union
import jwt
from fastapi import HTTPException, status
from data_intelligence_system.utils.logger import get_logger

logger = get_logger("api.auth")

# ุฅุนุฏุงุฏุงุช
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "your_secret_key_123")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_SECONDS = 3600  # 1 ุณุงุนุฉ

# ูุฌููุนุฉ ููุงุชูุญ API ุตุงูุญุฉ
VALID_API_KEYS = {"super_api_key_001", "admin_key_2025"}


def create_access_token(data: dict, expires_delta: Optional[Union[int, "time.timedelta"]] = None) -> str:
    """
    ุฅูุดุงุก ุฑูุฒ JWT ูุน ูุชุฑุฉ ุตูุงุญูุฉ.

    :param data: ุงูุจูุงูุงุช ุงููุฑุงุฏ ุชุถููููุง ูู ุงูุชููู (ูุซู ูุนุฑู ุงููุณุชุฎุฏู).
    :param expires_delta: ูุฏุฉ ุงูุตูุงุญูุฉ (ูููู timedelta ุฃู ุซูุงูู).
    :return: ุฑูุฒ JWT ูุดูุฑ.
    """
    to_encode = data.copy()

    if expires_delta is None:
        expire_time = int(time.time()) + ACCESS_TOKEN_EXPIRE_SECONDS
    elif hasattr(expires_delta, "total_seconds"):
        expire_time = int(time.time()) + int(expires_delta.total_seconds())
    else:
        expire_time = int(time.time()) + int(expires_delta)

    to_encode.update({"exp": expire_time})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    logger.info(f"๐ก๏ธ ุชู ุฅูุดุงุก ุชููู JWT ุฌุฏูุฏ")
    return encoded_jwt


def verify_token(token: str) -> dict:
    """
    ุงูุชุญูู ูู ุตุญุฉ ุฑูุฒ JWT ูุฅุฑุฌุงุน ุจูุงูุงุชู.
    ูุฑูุน ุงุณุชุซูุงุกุงุช jwt ุงูุฃุตููุฉ (ExpiredSignatureError, InvalidTokenError)

    :param token: ุฑูุฒ JWT.
    :return: ุจูุงูุงุช ุงูุชููู ุฅุฐุง ูุงู ุตุงูุญูุง.
    """
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        logger.info(f"๐ก๏ธ ุชู ุงูุชุญูู ูู ุตุญุฉ ุงูุชููู JWT")
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("๐จ ุงูุชูุช ุตูุงุญูุฉ ุงูุชููู JWT")
        raise
    except jwt.InvalidTokenError:
        logger.warning("๐จ ุชููู JWT ุบูุฑ ุตุงูุญ")
        raise


def verify_api_key(api_key: str):
    """
    ุชุญูู ูู ุตุญุฉ API Key.

    :param api_key: ููุชุงุญ API.
    :raises HTTPException: ุฅุฐุง ูุงู ุงูููุชุงุญ ุบูุฑ ูุตุฑุญ ุจู.
    """
    if api_key not in VALID_API_KEYS:
        logger.warning(f"๐ซ ูุญุงููุฉ ูุตูู ุจุงุณุชุฎุฏุงู API Key ุบูุฑ ูุตุฑุญ ุจู: {api_key}")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="API Key ุบูุฑ ูุตุฑุญ ุจู"
        )
    logger.info(f"โ ุชู ุงูุชุญูู ูู ุตุญุฉ API Key")
    return True
